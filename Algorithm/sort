<h2>23.05.14</h2>
<a href="https://velog.io/@leedahye2001/%EC%A0%95%EB%A0%AC">danshye.log 바로가기 :)</a>
<br>
<h3>🙋‍♀️ [Algorithm] Sort - python</h3>
<br>


## 1. 정렬

### 1-1 정렬 알고리즘 개요

정렬 : 데이터를 특정한 기준에 따라서 순서대로 나열하는 것

- 프로그램에서 데이터를 오름 or 내림차순 등 정렬해서 사용하는 경우가 많아 가장 많이 사용되는 알고리즘 중 하나임
- 이진 탐색의 전처리 과정이기도 함
- 파이썬에서는 특정 리스트의 원소를 뒤집는 메서드를 제공하며, 리스트를 뒤집는 연산은 O(N) 복잡도로 간단히 수행할 수 있음

### 1-2 선택 정렬

선택 정렬 : 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고, 그다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 방식 ⇒ 매번 가장 작은 것을 선택

- 가장 작은 데이터를 앞으로 보내는 과정을 N-1번 반복하면 정렬이 완료된다.

### 선택 정렬 소스코드

```python
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
	min_index = i  # 가장 작은 원소의 인덱스
	for j in range(i+1, len(array)):
		if array[min_index] > array[j]:
			min_index = j
	array[i], array[min_index] = array[min_index, array[i]]  # swap                                             

print(array)
```

<aside>
💡 위의 코드에서 알 수 있었던 점 : 임시 저장용 변수가 필요한 다른 C 언어 등과는 달리, 파이썬에서는 간단히 리스트 내 두 원소의 위치를 변경할 수 있다.

</aside>

### 선택 정렬의 시간 복잡도

*반복문이 얼마나 중첩되었는지를 기준으로 시간 복잡도 판단이 가능*

- N-1번 만큼 가장 작은 수를 찾아 맨 앞으로 보내고, 매번 가장 작은 수를 찾기 위해 비교 연산이 필요함
- (N^2 + N) / 2 번 연산을 수행한다고 표현이 가능 ⇒ 빅오 표기법으로  O(N^2)
    - 쉽게 말해, 코드 상 2중 반복문이 사용되었으므로 O(N^2) 라고 이해하면 됨

선택 정렬은 데이터가 10000개 이상이면 정렬 속도가 급격히 느려짐

| 데이터의 개수(N) | 선택 정렬 | 퀵 정렬 | 기본 정렬 라이브러리 |
| --- | --- | --- | --- |
| N = 100 | 0.0123s | 0.00156s | 0.00000753s |
| N = 1000 | 0.354s | 0.00343s | 0.0000365s |
| N = 10000 | 15.475s | 0.0312s | 0.000248s |

⇒ 선택 정렬은 다른 알고리즘에 비해 매우 비효율적임

### 1-3 삽입 정렬

삽입 정렬 : 특정한 데이터를 적절한 위치에 삽입하는 알고리즘 (특정 데이터가 적절한 위치에 들어가기 이전에, 그 앞까지의 데이터는 이미 정렬 되어 있다고 가정)

- 선택 정렬에 비해 실행 시간 측면에서 더 효율적인 알고리즘임
- 필요할 때만 위치를 바꾸므로 **‘데이터가 거의 정렬되어 있을 때’** 훨씬 효율적
- 정렬이 이루어진 원소는 항상 오름차순을 유지한다는 특징이 있음 ⇒ 이 특징 때문에 특정 데이터가 들어갈 위치를 선정할 때, 자기보다 작은 데이터를 만나면 그 자리에서 멈추면 됨

### 삽입 정렬 소스코드

```python
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
	for j in range(1, 0, -1):  # 인덱스 i부터 1까지 감소하며 반복하는 문법
		if array[j] > array[j-1]:  # 한 칸씩 왼쪽으로 이동
			array[j], array[j - 1] = array[j - 1], array[j]
		else:  # 자기보다 작은 데이터를 만나면 그 위치에 멈춤
			break                                          

print(array)
```

<aside>
💡 위의 코드에서 알 수 있었던 점 : 임시 저장용 변수가 필요한 다른 C 언어 등과는 달리, 파이썬에서는 간단히 리스트 내 두 원소의 위치를 변경할 수 있다.

</aside>

### 삽입 정렬의 시간 복잡도

- **현재 리스트의 데이터가 거의 정렬되어있는 상태라면 매우 빠르기 동작함**
- 빅오 표기법으로  O(N^2)
    - 선택 정렬과 마찬가지로, 코드 상 2중 반복문이 사용되었으므로 O(N^2) 라고 이해하면 됨
    - 최선의 경우 O(N)

일반적으로 비효율적이나, 거의 정렬되어있는 상황에서는 퀵 정렬 보다 더 강력함
